{
    "patches": [
        {
            "label": "2025-10-25_14-02-45",
            "content": "class Bateria:\n    def __init__(self, capacidade: int):\n        self.__capacidade = capacidade\n        self.__carga = capacidade\n\n    def getCarga(self) -> int:\n        return self.__carga\n\n    def getCapacidade(self) -> int:\n        return self.__capacidade\n\n    def usar(self, tempo: int) -> int:\n        gasto = min(self.__carga, tempo)\n        self.__carga -= gasto\n        return gasto\n\n    def carregar(self, tempo: int, potencia: int):\n        self.__carga = min(self.__capacidade, self.__carga + tempo * potencia)\n\n    def __str__(self):\n        return f\"({self.__carga}/{self.__capacidade})\"\n\n    def mostrar(self):\n        print(str(self))\n\n\nclass Carregador:\n    def __init__(self, potencia: int):\n        self.__potencia = potencia\n\n    def getPotencia(self) -> int:\n        return self.__potencia\n\n    def __str__(self):\n        return f\"(Pot\u00eancia {self.__potencia})\"\n\n    def mostrar(self):\n        print(str(self))\n\n\nclass Notebook:\n    def __init__(self):\n        self.__ligado = False\n        self.__bateria: Bateria | None = None\n        self.__carregador: Carregador | None = None\n\n    def setBateria(self, bateria: Bateria):\n        self.__bateria = bateria\n\n    def rmBateria(self) -> Bateria | None:\n        bateria = self.__bateria\n        self.__bateria = None\n        print(\"bateria removida\")\n        return bateria\n\n    def setCarregador(self, carregador: Carregador):\n        self.__carregador = carregador\n\n    def ligar(self):\n        if (self.__bateria and self.__bateria.getCarga() > 0) or self.__carregador:\n            self.__ligado = True\n            print(\"notebook ligado\")\n        else:\n            print(\"n\u00e3o foi poss\u00edvel ligar\")\n\n    def desligar(self):\n        self.__ligado = False\n        print(\"notebook desligado\")\n\n    def usar(self, tempo: int):\n        if not self.__ligado:\n            print(\"erro: ligue o notebook primeiro\")\n            return\n        if not self.__bateria and not self.__carregador:\n            print(\"erro: sem fonte de energia\")\n            self.__ligado = False\n            return\n\n        tempo_restante = tempo\n        if self.__bateria:\n            if self.__carregador:\n                # bateria carrega durante o uso\n                self.__bateria.carregar(tempo, self.__carregador.getPotencia())\n            else:\n                gasto = self.__bateria.usar(tempo)\n                tempo_restante -= gasto\n                if gasto < tempo:\n                    print(f\"Usando por {gasto} minutos, notebook descarregou\")\n                    self.__ligado = False\n                    return\n        print(f\"Usando por {tempo} minutos\")\n\n    def mostrar(self):\n        status = \"Ligado\" if self.__ligado else \"Desligado\"\n        bateria = str(self.__bateria) if self.__bateria else \"Nenhuma\"\n        carregador = str(self.__carregador) if self.__carregador else \"Desconectado\"\n        print(f\"Status: {status}, Bateria: {bateria}, Carregador: {carregador}\")\n",
            "lines": "97"
        }
    ]
}