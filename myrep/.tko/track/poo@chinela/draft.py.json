{
    "patches": [
        {
            "label": "2025-10-21_13-24-28",
            "content": "@@ -16,116 +16,27 @@\n     \n-# inicializa%C3%A7%C3%A3o da chinela com valor de tamanho 0%0A    def __init__(self):    # isso %C3%A9 o construtor em python\n+def __init__(self):\n %0A   \n@@ -37,34 +37,32 @@\n ):%0A        self.\n-__\n tamanho = 0 # qu\n@@ -61,163 +61,36 @@\n = 0 \n-# quando tem __ na frente em python %C3%A9 privado%0A%0A    def getTamanho(self): # m%C3%A9todos em python tem self como primeiro atributo%0A        return self.__tamanho%0A\n+ # inicia com tamanho 0%0A    \n %0A   \n@@ -115,18 +115,15 @@\n lf, \n-valor: int\n+tamanho\n ):%0A \n@@ -135,26 +135,36 @@\n   # \n-Verifica se valo\n+valida se o tamanho %C3%A9 pa\n r \n+e \n est%C3%A1\n@@ -181,120 +181,108 @@\n e 50\n- (inclusive)%0A        if valor %3C 20 or valor %3E 50:%0A            print(%22Erro: O tamanho deve estar entre 20 e 50.%22)\n+%0A        if tamanho %3E= 20 and tamanho %3C= 50 and tamanho %25 2 == 0:%0A            self.tamanho = tamanho\n %0A   \n@@ -288,32 +288,37 @@\n           return\n+ True\n %0A        # Verif\n@@ -314,314 +314,341 @@\n     \n-# Verifica se o valor %C3%A9 par%0A        if valor %25 2 != 0:%0A            print(%22Erro: O tamanho deve ser um n%C3%BAmero par.%22)%0A            return\n+else:%0A            return False%0A%0Achinela = Chinela()%0A%0Awhile True:%0A    tamanho_str = input(%22Digite o tamanho da chinela (par, entre 20 e 50): %22)\n %0A    \n+%0A\n     # \n-Se passou nas valida%C3%A7%C3%B5es, atribui o valor%0A        self.__tamanho = valor%0A%0A%0A# loop principal%0Achinela = Chinela() # criando chinela com valor tamanho padr%C3%A3o%0A%0Awhile\n+Verifica se a string digitada s%C3%B3 tem n%C3%BAmeros%0A    if tamanho_str.isdigit():%0A        tamanho_num = int(tamanho_str)  # aqui podemos converter pois s%C3%B3 tem d%C3%ADgitos%0A        %0A        if\n  chi\n@@ -644,33 +644,33 @@\n      if chinela.\n-g\n+s\n etTamanho() == 0\n@@ -667,295 +667,274 @@\n nho(\n-) == 0: # mantendo usu%C3%A1rio no loop%0A    print(%22Digite seu tamanho de chinela%22)%0A    tamanho = int(input()) # lendo a resposta e convertendo\n+tamanho_num):%0A            print(f%22Tamanho v%C3%A1lido definido: %7Bchinela.tamanho%7D%22)%0A            break%0A        else:%0A           \n  pr\n-a \n int\n-eiro%0A    chinela.setTamanho(tamanho) # tentando atribuir e disparando %0A%0Aprint(%22Parab%C3%A9ns, voc%C3%AA comprou uma chinela tamanho%22, chinela.getTamanho()\n+(%22Erro: O tamanho deve ser um n%C3%BAmero par entre 20 e 50. Tente novamente.%22)%0A    else:%0A        print(%22Erro: Por favor, insira apenas n%C3%BAmeros.%22\n )%0A\n",
            "lines": "28"
        },
        {
            "label": "2025-10-21_13-26-26",
            "content": "class Chinela:\n    # inicializa\u00e7\u00e3o da chinela com valor de tamanho 0\n    def __init__(self):    # isso \u00e9 o construtor em python\n        self.__tamanho = 0 # quando tem __ na frente em python \u00e9 privado\n\n    def getTamanho(self): # m\u00e9todos em python tem self como primeiro atributo\n        return self.__tamanho\n\n    def setTamanho(self, valor: int):\n        # Verifica se valor est\u00e1 entre 20 e 50 (inclusive)\n        if valor < 20 or valor > 50:\n            print(\"Erro: O tamanho deve estar entre 20 e 50.\")\n            return\n        # Verifica se o valor \u00e9 par\n        if valor % 2 != 0:\n            print(\"Erro: O tamanho deve ser um n\u00famero par.\")\n            return\n        # Se passou nas valida\u00e7\u00f5es, atribui o valor\n        self.__tamanho = valor\n\n\n# loop principal\nchinela = Chinela() # criando chinela com valor tamanho padr\u00e3o\n\nwhile chinela.getTamanho() == 0: # mantendo usu\u00e1rio no loop\n    print(\"Digite seu tamanho de chinela\")\n    tamanho = int(input()) # lendo a resposta e convertendo pra inteiro\n    chinela.setTamanho(tamanho) # tentando atribuir e disparando \n\nprint(\"Parab\u00e9ns, voc\u00ea comprou uma chinela tamanho\", chinela.getTamanho())\n",
            "lines": "30"
        }
    ]
}