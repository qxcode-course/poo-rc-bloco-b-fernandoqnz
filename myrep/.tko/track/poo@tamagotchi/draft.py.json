{
    "patches": [
        {
            "label": "2025-10-25_15-04-51",
            "content": "@@ -857,16 +857,170 @@\n value)%0A%0A\n+    def get_energy(self):%0A        return self.energy%0A%0A    def get_clean(self):%0A        return self.clean%0A%0A    def get_age(self):%0A        return self.age%0A%0A\n     def \n@@ -2442,49 +2442,8 @@\n eak%0A\n-        if not line:%0A            continue\n %0A   \n@@ -2509,16 +2509,17 @@\n   break%0A\n+%0A\n         \n",
            "lines": "119"
        },
        {
            "label": "2025-10-25_15-07-49",
            "content": "@@ -1315,31 +1315,8 @@\n pet%0A\n-        print(%22$play%22)%0A\n     \n@@ -1327,32 +1327,32 @@\n if not p.alive:%0A\n+\n             prin\n@@ -1492,16 +1492,39 @@\n age + 1)\n+%0A        print(%22$play%22)\n %0A%0A    de\n@@ -1563,32 +1563,8 @@\n pet%0A\n-        print(%22$sleep%22)%0A\n     \n@@ -1870,16 +1870,40 @@\n _energy)\n+%0A        print(%22$sleep%22)\n %0A%0A    de\n@@ -1943,33 +1943,8 @@\n pet%0A\n-        print(%22$shower%22)%0A\n     \n@@ -2083,32 +2083,32 @@\n ean(p.cleanMax)%0A\n-\n         p.set_ag\n@@ -2120,16 +2120,41 @@\n ge + 2)%0A\n+        print(%22$shower%22)%0A\n %0A%0Adef ma\n",
            "lines": "110"
        },
        {
            "label": "2025-10-25_15-10-40",
            "content": "class Tamagochi:\n    def __init__(self, energyMax: int, cleanMax: int):\n        self.energyMax = energyMax\n        self.cleanMax = cleanMax\n        self.energy = energyMax\n        self.clean = cleanMax\n        self.age = 0\n        self.alive = True\n\n    def set_energy(self, value: int):\n        if not self.alive:\n            return\n        self.energy = max(0, min(self.energyMax, value))\n        if self.energy == 0:\n            self.alive = False\n            print(\"fail: pet morreu de fraqueza\")\n\n    def set_clean(self, value: int):\n        if not self.alive:\n            return\n        self.clean = max(0, min(self.cleanMax, value))\n        if self.clean == 0:\n            self.alive = False\n            print(\"fail: pet morreu de sujeira\")\n\n    def set_age(self, value: int):\n        if not self.alive:\n            return\n        self.age = max(0, value)\n\n    def is_alive(self):\n        return self.alive\n\n\nclass Game:\n    def __init__(self):\n        self.pet = None\n\n    def init_pet(self, energyMax: int, cleanMax: int):\n        self.pet = Tamagochi(energyMax, cleanMax)\n        print(f\"$init {energyMax} {cleanMax}\")\n\n    def show(self):\n        p = self.pet\n        print(\"$show\")\n        print(f\"E:{p.energy}/{p.energyMax}, L:{p.clean}/{p.cleanMax}, I:{p.age}\")\n\n    def play(self):\n        p = self.pet\n        print(\"$play\")\n        if not p.alive:\n            print(\"fail: pet esta morto\")\n            return\n        p.set_energy(p.energy - 2)\n        p.set_clean(p.clean - 3)\n        p.set_age(p.age + 1)\n\n    def sleep(self):\n        p = self.pet\n        print(\"$sleep\")\n        if not p.alive:\n            print(\"fail: pet esta morto\")\n            return\n        if p.energy > p.energyMax - 5:\n            print(\"fail: nao esta com sono\")\n            return\n        missing_energy = p.energyMax - p.energy\n        p.set_energy(p.energyMax)\n        p.set_age(p.age + missing_energy)\n\n    def shower(self):\n        p = self.pet\n        print(\"$shower\")\n        if not p.alive:\n            print(\"fail: pet esta morto\")\n            return\n        p.set_energy(p.energy - 3)\n        p.set_clean(p.cleanMax)\n        p.set_age(p.age + 2)\n\n\ndef main():\n    game = Game()\n    while True:\n        try:\n            line = input().strip()\n        except EOFError:\n            break\n        if not line:\n            continue\n        if line == \"end\":\n            print(\"$end\")\n            break\n        cmd = line.split()\n        if cmd[0] == \"init\":\n            game.init_pet(int(cmd[1]), int(cmd[2]))\n        elif cmd[0] == \"show\":\n            game.show()\n        elif cmd[0] == \"play\":\n            game.play()\n        elif cmd[0] == \"sleep\":\n            game.sleep()\n        elif cmd[0] == \"shower\":\n            game.shower()\n        else:\n            print(\"fail: comando invalido\")\n\n\nif __name__ == \"__main__\":\n    main()\n",
            "lines": "110"
        }
    ]
}